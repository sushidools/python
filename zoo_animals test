#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon May 21 20:44:34 2018

@author: aleksandradooley
"""

zoo_animals = { 'Unicorn' : 'Cotton Candy House',
'Sloth' : 'Rainforest Exhibit',
'Bengal Tiger' : 'Jungle House',
'Atlantic Puffin' : 'Arctic Exhibit',
'Rockhopper Penguin' : 'Arctic Exhibit'}
# A dictionary (or list) declaration may break across multiple lines

# Removing the 'Unicorn' entry. (Unicorns are incredibly expensive.)
del zoo_animals['Unicorn']

del zoo_animals['Sloth']
del zoo_animals['Bengal Tiger']

zoo_animals['Rockhopper Penguin'] = 'Coastal Exhibit'

print zoo_animals



backpack = ['xylophone', 'dagger', 'tent', 'bread loaf']

backpack.remove('dagger')
print backpack


#original given code
inventory = {
  'gold' : 500,
  'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key
  'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']
}

# Adding a key 'burlap bag' and assigning a list to it
inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']

# Sorting the list found under the key 'pouch'
inventory['pouch'].sort() 

# Your code here

# edited code
inventory = {
  'gold' : 500,
  'pouch' : ['flint', 'twine', 'gemstone'], # Assigned a new list to 'pouch' key
  'backpack' : ['xylophone','dagger', 'bedroll','bread loaf']
}

# Adding a key 'burlap bag' and assigning a list to it
inventory['burlap bag'] = ['apple', 'small ruby', 'three-toed sloth']

# Sorting the list found under the key 'pouch'
inventory['pouch'].sort() 

inventory['pocket'] = ['seashell', 'strange berry', 'lint']
inventory['backpack'].sort()
inventory['backpack'].remove('dagger')
inventory['gold'] = inventory['gold'] + 50
print inventory


# next lesson
names = ["Adam","Alex","Mariah","Martine","Columbus"]

for name in names:
  print name
  
  
# Next lesson
# This code will print the definitions
  
  webster = {
  "Aardvark" : "A star of a popular children's cartoon show.",
  "Baa" : "The sound a goat makes.",
  "Carpet": "Goes on the floor.",
  "Dab": "A small amount."
}

for key in webster:
  print webster[key]

#This code will print the even numbers
a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

for number in a:
  if number % 2 == 0:
    print number

#The next lesson count how many time "fizz" is listed
#This is the finished code
def fizz_count(x):
  count = 0
  for item in x:
    if item == "fizz":
      count = count + 1
  return count

# Next lesson stock and prices in separate lists and then print them together
  
prices = {"banana": 4,"apple": 2,"orange": 1.5,"pear": 3}

stock = {"banana": 6, "apple": 0, "orange": 32, "pear": 15}

for food in prices:
  print food
  print "price: %s" % prices[food]
  print "stock: %s" % stock[food]

# Now to find the total if all stock was bought
  
  total = 0
for food in prices:
  print prices[food] * stock[food]
  total = total + prices[food] * stock[food]
  print total
  
  
  # okay so it prints some things twice 
  
  shopping_list = ["banana", "orange", "apple"]

stock = {
  "banana": 6,
  "apple": 0,
  "orange": 32,
  "pear": 15
}
    
prices = {
  "banana": 4,
  "apple": 2,
  "orange": 1.5,
  "pear": 3
}

# Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    total = total + prices[item]
  return total

#Make these changes so that it only adds the price of the item if the stock is greater than 0 
  # and subtract 1 from the stock once it has been added to the total
  
  
def compute_bill(food):
  total = 0
  for item in food:
    if stock[item] > 0:
      total += prices[item]
      stock[item] -= 1
  return total
print total

# So the results of this lesson are... and why does it still repeat
shopping_list = ["banana", "orange", "apple"]

stock = {
  "banana": 6,
  "apple": 0,
  "orange": 32,
  "pear": 15
}
    
prices = {
  "banana": 4,
  "apple": 2,
  "orange": 1.5,
  "pear": 3
}

# Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    if stock[item] > 0:
   	 total += prices[item]
    stock[item] -= 1
  return total
print total


#okay so on to dictinaries with lists and computing grades all combined

lloyd = {
  "name": "Lloyd",
  "homework": [90.0, 97.0, 75.0, 92.0],
  "quizzes": [88.0, 40.0, 94.0],
  "tests": [75.0, 90.0]
}
alice = {
  "name": "Alice",
  "homework": [100.0, 92.0, 98.0, 100.0],
  "quizzes": [82.0, 83.0, 91.0],
  "tests": [89.0, 97.0]
}
tyler = {
  "name": "Tyler",
  "homework": [0.0, 87.0, 75.0, 22.0],
  "quizzes": [0.0, 75.0, 78.0],
  "tests": [100.0, 100.0]
}

students = [lloyd, alice, tyler]
for student in students:
    print student["name"]
    print student["homework"]
    print student["quizzes"]
    print student["tests"]
    
def average(numbers):
  total = sum(numbers)
  total = float(total)
  return total / len(numbers)

def get_average(student):
  homework = average(student["homework"])
  quizzes = average(student["quizzes"])
  tests = average(student["tests"])
  return (homework * .10) + (quizzes * .30) + (tests * .60)

def get_letter_grade(score):
  if score >= 90:
    return "A"
  elif score >= 80:
    return "B"
  elif score >= 70:
    return "C"
  elif score >= 60:
    return "D"
  else:
    return "F"
  
  # so it asked me to print the resulting letter grade
  #and call get_letter_grade function and pass in get_average(lloyd)
  # so to call in and pass in is to put the function within the function by 
  # using parantheses
print get_letter_grade(get_average(lloyd))

# get the class average now

def get_class_average(class_list):
  results = []
  for student in class_list:
    student_avg = get_average(student)
    results.append(student_avg)
  return average(results)

# so to get the letter grade for the class
  
students = [alice, lloyd, tyler]

print get_class_average(students)

def get_letter_grade(score):
  if score >= 90:
    return "A"
  elif score >= 80:
    return "B"
  elif score >= 70:
    return "C"
  elif score >= 60:
    return "D"
  else:
    return "F"
  
print get_letter_grade(get_class_average(students))


# how to print something from a list without saying what is in the list 

n = [1, 3, 5]

# Add your code below
print n[1]

#how to modify something within a list without rewriting
n = [1, 3, 5]
n[1] = n[1] * 5
print n

# how to add something to a list
n = [1,3, 5]
n.append(4)
print n


# three ways to remove something from your list
n = [1, 3, 5]
n.remove(n[0])
print n

n = [1, 3, 5]
del(n[0])
print n

n = [1,3,5]
n.pop(0)
print n

#changed this function to multiply by 3 instead of add and return
number = 5

def my_function(x):
  return x * 3

print my_function(number)

# wrote the middle portion that adds the two values
m = 5
n = 13
def add_function(x,y):
  return x + y



print add_function(m, n)

#Write a function called string_function that takes in a string argument(s) and 
#and then return s that argument concatenated with the word 'world'
# Don't add a space before world!

n = "Hello"
def string_function(s):
  return s + 'world'



print string_function(n)

# you pass a list to a function the same way you pass any other argument to a function

def list_function(x):
  return x

n = [3, 5, 7]
print list_function(n)

#how to print one item stored in a list

def list_function(x):
  return x[1]

n = [3, 5, 7]
print list_function(n)

#How to change an item in an idex and store the result back into that index and then print the list


def list_function(x):
  x[1] = x[1] + 3
  return x

n = [3, 5, 7] 
print list_function(n)

# how to append items to a list
n = [3, 5, 7]
def list_extender(lst):
    lst.append(9)
    return lst

print list_extender(n)
# for the above code you can't have lst with a number in it. It throws it off

#So here we print out each element one by one

n = [3, 5, 7]

def print_list(x):
  for i in range(0, len(x)):
    print x[i]
    
print_list(n)
#watch the indentations
#After defining print_list the next line must be indented as it pertains to the
#previous line
#same for the print that must also be indented


#This next less is to modify each element in a list in a funciton
n = [3, 5, 7]

def double_list(x):
    for i in range(0, len(x)):
        x[i] = x[i] * 2
    return x

print double_list(n)

# so when defining a function with one argument x then that must be used through
#-out underneath the defining funciton

#create a list using the funciton range()
def my_function(x):
  for i in range(0, len(x)):
    x[i] = x[i]
  return x

print my_function(range(3)) # Add your range between the parentheses!


#  for this less learn to ieterate through indexes
# return the list added together
n = [3, 5, 7]

def total(numbers):
  result = 0
  for i in range(0,len(numbers)):
    result += numbers[i]
  return result

# creating a function that concatenates strings
n = ["Michael", "Lieberman"]


def join_strings(words):
    result = ""
    for word in range(len(words)):
        result += word
    return result

print join_strings(n)

